// 재사용 기법 => 상속 (IS-A) / 포함 (HAS-A)
/*
 * 	상속 : 재사용 기법
 * 		  기존의 클래스를 재사용해서 새로운 클래스를 작성하는 것이다
 * 		  ==========           ==========
 * 		  => 신뢰성이 뛰어나다
 * 		  => 코딩을 하지 않는다
 * 		  => 필요하면 변경해서 사용이 가능하다
 * 		  => extends => 사용 상속을 받는다 (자바는 단일상속을 기본으로 한다)
 * 
 * 		  기본 클래스 : 부모, 상위, 베이스, 슈퍼 클래스 => 상속을 내리는 클래스
 * 		  새로운 클래스 : 자식, 하위, 파생, 서브 클래스 => 상속을 받는 클래스
 * 
 * 		  **** 유일하게 클래스의 크기를 설정 (상속)
 * 			   => 상속 내리는 클래스 : 상속을 내리는 클래스는 받는 클래스보다 크다
 * 			   => 상속을 받는 클래스
 * 		  **** 상속 : 기존의 클래스의 모든 것을 받아서 사용이 가능
 * 					 예외) static : 공동으로 사용이 가능 (공통변수)
 * 						  생성자
 * 						  private : 자신의 클래스에서만 접근 ==> 상속은 내려간다 ... 접근은 할 수 없다
 */

public class MainClass3 {
	public static void main(String[] args) {

	}
}
